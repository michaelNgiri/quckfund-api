// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  fullName         String
  passwordHash     String
  role             UserRole @default(USER)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // A User can have many Loans. This is correct.
  loans            Loan[]
  // A User can have many NotificationLogs. This is correct.
  notificationLogs NotificationLog[]
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  DEFAULTED
}

model Loan {
  id              String     @id @default(uuid())
  amountRequested Float
  purpose         String?
  status          LoanStatus @default(PENDING)
  score           Int?
  approvedAt      DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relation to User. This is correct.
  user            User       @relation(fields: [userId], references: [id])
  userId          String

  // A Loan can have many Repayments. This is correct.
  repayments      Repayment[]

  // REMOVED: notificationLogs relation was here. It's incorrect.
  // Notifications are tied to the User, not directly to the Loan in this schema.
}

enum RepaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

model Repayment {
  id                   String          @id @default(uuid())
  amount               Float
  paymentMethod        String
  transactionReference String          @unique
  status               RepaymentStatus @default(PENDING)
  createdAt            DateTime        @default(now())

  // Relation to Loan. This is correct.
  loan                 Loan            @relation(fields: [loanId], references: [id])
  loanId               String
}

model NotificationLog {
  id      String   @id @default(uuid())
  content String
  type    String
  sentAt  DateTime @default(now())

  // Relation to User. This is correct.
  user    User     @relation(fields: [userId], references: [id])
  userId  String
}